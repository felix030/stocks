openapi: 3.0.0
info:
  version: "1.0-DRAFT-2021-11-21"
  title: Stocks App
  description: |
    Application to receive and manipulate stock information.

servers:
  - url: /stocks-mgmt

tags:
  - name: Stocks Application
    description: Stocks application management

paths:
  /external/v1/stocks:
    get:
      summary: Return a list viewable stocks
      operationId: allViewableStocks
      responses:
        '200':
          description: All viewable stocks for user.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebStocksResponse"
        default:
          description: An unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebError"

    post:
      summary: Create a stock
      operationId: createStock
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WebStockRequestBody"
      responses:
        '200':
          description: The created stock
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebStock"
        default:
          description: An unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebError"

  /external/v1/stocks/{stockId}:
    get:
      summary: Request a specific stock
      operationId: fetchStock
      parameters:
        - $ref: "#/components/parameters/stockId"
      responses:
        '200':
          description: Get the requested stock by id
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebStock"
        default:
          description: An unexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/WebError"

components:
  parameters:

    stockId:
      in: path
      name: stockId
      description: "The identifier of a stock"
      required: true
      example: "a80c60bc-4bd1-11ec-81d3-0242ac130003"
      schema:
        type: string
        format: uuid

  schemas:

    WebStockRequestBody:
      type: object
      description: Request to create a stock.
      required:
        - name
        - price
        - currencyValue
      properties:
        name:
          $ref: "#/components/schemas/WebStockName"
        price:
          $ref: "#/components/schemas/WebStockPrice"
        currencyValue:
          $ref: "#/components/schemas/WebCurrencyValue"

    WebStocksResponse:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        stocks:
          type: array
          items:
            $ref: "#/components/schemas/WebStock"

    WebStock:
      type: object
      properties:
        id:
          description: "The id for this stock."
          type: string
          format: uuid
        name:
          $ref: "#/components/schemas/WebStockName"
        price:
          $ref: "#/components/schemas/WebStockPrice"
        currencyValue:
          $ref: "#/components/schemas/WebCurrencyValue"

    WebStockName:
      type: string
      minLength: 3
      description: "The name of the stock."

    WebStockPrice:
      type: integer
      format: int64
      minimum: 0
      description: "The current price in cents."

    WebCurrencyValue:
      type: string
      enum:
        - EURO_CENT
        - US_DOLLAR_CENT

    WebError:
      required:
        - httpCode
        - errorMessage
      properties:
        errorCode:
          $ref: "#/components/schemas/ErrorCode"
        errorMessage:
          type: string

    ErrorCode:
      type: string
      enum: [ "FORBIDDEN", "BAD_REQUEST", "NOT_FOUND", "TIMEOUT", "UNAUTHORIZED", "TECHNICAL"]